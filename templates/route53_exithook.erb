#!/bin/bash

### File managed with puppet ###
### Served by:        '<%= scope.lookupvar('::servername') %>'
### Module:           '<%= scope.to_hash['module_name'] %>'
### Template source:  '<%= template_source %>'

# This script will perform a DynDNS-like function for Amazon's Route 53
#
# Original Author: Johan Lindh <johan@linkdata.se>
# http://www.linkdata.se/
#
# Modified by: Johan Lyheden <johan@lyheden.com>
#
# Modified by: Viktor Keremedchiev <vkeremedchiev@adaptavist.com>

# The domain and host name to update
# and the desired TTL of the record
Domain="<%=@server_domain%>"
Hostname=$(hostname -s)
PublicDnsName="${Hostname}.${Domain}"
NewTTL=<%= @dhcp_update_ttl %>
RecordType=A

# The Amazon Route 53 zone ID for the domain
# and the Amazon ID and SecretKey. Remember to
# ensure that this file can't be read by
# unauthorized people!
ZoneID="<%= @dhcp_update_zone_id %>"
AmazonID="<%= @dhcp_update_user %>"
SecretKey="<%= @dhcp_update_key_secret %>"

###############################################################
# You should not need to change anything beyond this point
###############################################################

# Find an authoritative AWS R53 nameserver so we get a clean TTL
#AuthServer=$(dig NS $Domain | grep -v ';' | grep -m 1 awsdns | grep $Domain | awk -F ' ' '{ print $5 }')
#if [ "$AuthServer" = "" ]; then
#  echo The domain $Domain has no authoritative Amazon Route 53 name servers
#  exit 1
#else
#  # Get the record and extract its parts
#  Record=$(dig @$AuthServer $RecordType $Hostname.$Domain | grep -v ";" | grep "$Hostname\.$Domain")
#  OldType=$( echo $Record | cut -d ' ' -f 4 )
#  OldTTL=$( echo $Record | cut -d ' ' -f 2 )
#  OldIP=$( echo $Record | cut -d ' ' -f 5 )

#  # This can no be verified until zone has been changed
#  # Make sure it is an A record (could be CNAME)
#  if [ "$Record" != "" -a "$OldType" != $RecordType ]; then
#    echo $Hostname.$Domain has a $OldType record, expected $RecordType
#    exit 1
#  fi
#fi

# Retrieve the current IP (dhclient hook)
CurrentIP=<%= @nsupdate_ip_source %>

# Changeset preamble
Changeset=""
Changeset=$Changeset"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
Changeset=$Changeset"<ChangeResourceRecordSetsRequest xmlns=\"https://route53.amazonaws.com/doc/2010-10-01/\">"
Changeset=$Changeset"<ChangeBatch><Comment>Update $Hostname.$Domain</Comment><Changes>"


# Use UPSERT to update/create
Changeset=$Changeset"<Change>"
Changeset=$Changeset"<Action>UPSERT</Action>"
Changeset=$Changeset"<ResourceRecordSet>"
Changeset=$Changeset"<Name>$Hostname.$Domain.</Name>"
Changeset=$Changeset"<Type>$RecordType</Type>"
Changeset=$Changeset"<TTL>$NewTTL</TTL>"
Changeset=$Changeset"<ResourceRecords>"
Changeset=$Changeset"<ResourceRecord>"
Changeset=$Changeset"<Value>$CurrentIP</Value>"
Changeset=$Changeset"</ResourceRecord>"
Changeset=$Changeset"</ResourceRecords>"
Changeset=$Changeset"</ResourceRecordSet>"
Changeset=$Changeset"</Change>"

# Close the changeset
Changeset=$Changeset"</Changes>"
Changeset=$Changeset"</ChangeBatch>"
Changeset=$Changeset"</ChangeResourceRecordSetsRequest>"

#if [ "$OldIP" != "$CurrentIP" ]; then
function updateip() {
  # Get the date at the Amazon servers
  CurrentDate=$(wget -q -S https://route53.amazonaws.com/date -O /dev/null 2>&1 | grep Date | sed 's/.*Date: //')

  # Calculate the SHA1 hash and required headers
  Signature=$(echo -n $CurrentDate | openssl dgst -binary -sha1 -hmac $SecretKey | base64)
  DateHeader="Date: "$CurrentDate
  AuthHeader="X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AmazonID,Algorithm=HmacSHA1,Signature=$Signature"

  # Submit request
  Result=$(wget -nv --header="$DateHeader" --header="$AuthHeader" --header="Content-Type: text/xml; charset=UTF-8" --post-data="$Changeset" -O /dev/stdout -o /dev/stdout https://route53.amazonaws.com/2010-10-01/hostedzone/$ZoneID/rrset)
  if [ "$?" -ne "0" ]; then
    echo "Failed to update $Hostname.$Domain: "$Result
  fi

}
#fi

updateip
